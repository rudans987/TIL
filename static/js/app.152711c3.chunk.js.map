{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","inputRef","useRef","useState","working","setWorking","text","setText","editText","setEditText","toDos","setToDos","useEffect","loadWorking","loadToDos","travel","AsyncStorage","setItem","JSON","stringify","work","saveToDos","toSave","e","console","log","h","getItem","parse","s","addToDo","newToDos","Date","now","completed","isEdit","onChangeEditText","payload","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","btnText","color","TextInput","onSubmitEditing","onChangeText","value","returnKeyType","placeholder","input","ScrollView","Object","keys","map","key","toDo","editSaveToDo","editInput","ref","toDoText","textDecorationLine","icons","setTimeout","current","focus","editToDo","FontAwesome5","name","size","marginLeft","completeToDo","Fontisto","Platform","OS","confirm","Alert","alert","deletToDo","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontSize","fontWeight","paddingVertical","borderRadius","marginVertical","width","height","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.152711c3.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  grey: \"#3A3D40\",\r\n  toDoBg: \"#5C5C60\",\r\n};\r\n","// TouchableOpacity: 누르는 이벤트를 listen할 준비가 된 view, 누를때 투명해지는 애니메이션 효과가 있다.\n// TouchableHighlight: 요소를 눌렀을 때 배경색이 바뀐다.\n// TouchableWithoutFeedback : 어떤 애니메이션도 없는 Touchable\n// onPress : 유저가 Touchable을 눌렀을때 실행되는 이벤트\n// Pressable: 새롭고 더 많은 설정이 가능한 Touchable\n\n//TextTnput\n// returnKeyType : 엔터키의 타입을 변경할 수 있는 props\n// onSubmitEditing : 엔터를 눌렀을 때 일어나는 함수\n// onChangeText : 텍스트가 바뀔 때 실행되는 함수\n\n//Platform : 지금 실행되고 있는 플랫폼이 무엇인지 알 수 있다.\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { useEffect, useRef, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { theme } from \"./colors\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport { FontAwesome5 } from \"@expo/vector-icons\";\nconst STORAGE_KEY = \"@toDos\";\nconst STORAGE_HederKEY = \"@working\";\n\nexport default function App() {\n  const inputRef = useRef();\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [editText, setEditText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadWorking();\n    loadToDos();\n  }, []);\n  const travel = async () => {\n    setWorking(false);\n    await AsyncStorage.setItem(\"@working\", JSON.stringify(false));\n  };\n  const work = async () => {\n    setWorking(true);\n    await AsyncStorage.setItem(\"@working\", JSON.stringify(true));\n  };\n  const onChangeText = (payload) => {\n    setText(payload);\n  };\n  const saveToDos = async (toSave) => {\n    // JSON.stringify는 object를 string으로 바꾼다.\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const loadWorking = async () => {\n    const h = await AsyncStorage.getItem(\"@working\");\n    setWorking(JSON.parse(h));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    //JSON.parse는 string을 js object로 만든다.\n    if (s) {\n      setToDos(JSON.parse(s));\n    }\n  };\n\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    // 새로운 todos를 만드는 두가지 방법\n    // const newToDos = Object.assign({}, toDos, {\n    //   [Date.now()]: { text, work: working },\n    // });\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working, completed: false, isEdit: false },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  const deletToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"정말 삭제하시겠습니까?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"TO DO 삭제\", \"정말 삭제하시겠습니까?\", [\n        { text: \"취소\" },\n        {\n          text: \"예\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n  const completeToDo = (key) => {\n    const newToDos = { ...toDos };\n    newToDos[key].completed = !newToDos[key].completed;\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n  const editToDo = (key) => {\n    const newToDos = { ...toDos };\n    newToDos[key].isEdit = true;\n    setEditText(newToDos[key].text);\n    setToDos(newToDos);\n    saveToDos(newToDos);\n    setTimeout(() => {\n      inputRef.current?.focus();\n    }, 10);\n  };\n  const editSaveToDo = (key) => {\n    const newToDos = { ...toDos };\n    newToDos[key].text = editText;\n    newToDos[key].isEdit = false;\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n  const onChangeEditText = (payload) => {\n    setEditText(payload);\n  };\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => work()}>\n          <Text\n            style={{ ...styles.btnText, color: working ? \"white\" : theme.grey }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={() => travel()}>\n          <Text\n            style={{\n              ...styles.btnText,\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        value={text}\n        returnKeyType=\"done\"\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {/* Object.keys(some object)는 key값들만 담긴 배열을 반환함 */}\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              {!toDos[key].isEdit ? (\n                <Text\n                  style={{\n                    ...styles.toDoText,\n                    textDecorationLine: toDos[key].completed\n                      ? \"line-through\"\n                      : \"none\",\n                  }}\n                >\n                  {toDos[key].text}\n                </Text>\n              ) : (\n                <TextInput\n                  onSubmitEditing={() => editSaveToDo(key)}\n                  onChangeText={onChangeEditText}\n                  value={editText}\n                  returnKeyType=\"done\"\n                  style={styles.editInput}\n                  ref={inputRef}\n                />\n              )}\n              <View style={styles.icons}>\n                {!toDos[key].isEdit && (\n                  <TouchableOpacity onPress={() => editToDo(key)}>\n                    <FontAwesome5 name=\"edit\" size={40} color={theme.grey} />\n                  </TouchableOpacity>\n                )}\n                <TouchableOpacity\n                  style={{ marginLeft: 25 }}\n                  onPress={() => completeToDo(key)}\n                >\n                  {!toDos[key].completed ? (\n                    <Fontisto\n                      name=\"checkbox-passive\"\n                      size={40}\n                      color={theme.grey}\n                    />\n                  ) : (\n                    <Fontisto\n                      name=\"checkbox-active\"\n                      size={40}\n                      color={theme.grey}\n                    />\n                  )}\n                </TouchableOpacity>\n                <TouchableOpacity\n                  style={{ marginLeft: 25 }}\n                  onPress={() => deletToDo(key)}\n                >\n                  <Fontisto name=\"trash\" size={40} color={theme.grey} />\n                </TouchableOpacity>\n              </View>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 38,\n    fontWeight: \"600\",\n    color: \"white\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  editInput: {\n    backgroundColor: \"white\",\n    paddingHorizontal: 15,\n    borderRadius: 30,\n    width: 180,\n    height: 45,\n    fontSize: 16,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n  icons: {\n    flexDirection: \"row\",\n  },\n});\n"],"sourceRoot":""}