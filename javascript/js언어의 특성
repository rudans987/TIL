# js언어의 특성

## 목차
1. [js의 자료형과 js만의 특성](#1javascript의-자료형과-javascript만의-특성)
2. [객체와 불변성](#2javascript-객체와-불변성이란)
3. [호이스팅과 TDZ](#3호이스팅과-tdz는-무엇일까)

## **1)JavaScript의 자료형과 JavaScript만의 특성**

### **JavaScript는 느슨한 타입(loosely typed)의 동적(dynamic) 언어입니다.**

---

#### **느슨한 타입**

-    타입 없이 변수를 선언하는 것이다.
-   반면에 강력한 타입(strong typing)을 사용하는 언어는 타입과 함께 변수를 선언해야만 한다.

```
/* JavaScript Example (loose typing) */
var a = 13; // Number 선언
var b = "thirteen"; // String 선언

/* Java Example (strong typing) */
int a = 13; // int 선언
String b = "thirteen"; // String 선언
```

#### 동적 언어

-   **런타임에 타입이 결정되는 언어.**
-   즉, 소스가 빌드될 때 자료형을 결정하는 것이 아니라 **실행 시 결정된다.**
-   매번 타입을 써줄 필요가 없기 때문에 프로그래머가 빠르게 코드를 작성할 수 있다.
-   JavaScript, Ruby, Python 등은 대표적인 동적 언어이다.
-   런타임까지 타입에 대한 결정을 끌고 갈 수 있기 때문에 선택의 여지가 있다.
-   실행 도중에 변수에 예상치 못한 타입이 들어와 Type Error가 발생하는 경우가 생길 수 있다.

#### 정적 언어

-   **컴파일 시간에 변수의 타입이 결정되는 언어.**
-   **타입** 즉, 자료형을 **컴파일 시에 결정하는 것**.
-   C, C++, Java 등은 대표적인 정적 언어이다.
-   정적 언어는 변수에 들어갈 값의 형태에 따라 자료형을 지정해주어야 한다.
-   컴파일 시에 자료형에 맞지 않는 값이 들어있을 경우 컴파일 에러가 발생한다.
-   컴파일 시간에 변수의 타입을 체크하므로 사소한 버그들을 쉽게 체크할 수 있는 장점이 있다.
-   즉 타입 에러로 인한 문제점을 초기에 발견할 수 있어 타입의 안정성이 올라간다.

### JavaScript 형변환

---

-   함수와 연산자에 전달되는 값은 대부분 적절한 자료형으로 자동 변환됩니다. 이런 과정을 "형 변환(type conversion)"이라고 합니다.
-   문자형으로 변환 :
    -   String(value) 함수를 호출해 전달받은 값을 문자열로 변환 할 수도 있습니다.
-   숫자형으로 변환
    -   Number(value) 함수를 사용하면 주어진 값(value)을 숫자형으로 명시해서 변환할 수 있습니다.
    -   Number(undefined)은 NaN
    -   펄시한 값(falsy values : null, false,"빈문자열")에 대해서는 0으로 표현합니다.  
        트루시한 값(truthy values)에 대해서는 1로 표현합니다.

```
const falsy1 = null;
Number(falsy1); // 0;

const falsy2 = '';
Number(falsy2); // 0;

const falsy3 = false;
Number(falsy3); // 0;

const truthy1 = [];
Number(truthy1); // 0;

const truthy2 = true;
Number(truthy2); // 1;

const truthy3 = {};
Number({}); // NaN;
```

-   블린형으로 변환 :
    -   Boolean(value)으로 변환할 수 있습니다.
    -   숫자 0, 빈 문자열, null, undefined, NaN과 같이 직관적으로도 “비어있다고” 느껴지는 값들은 false가 됩니다.  
    -   그 외의 값은 true로 변환됩니다. 문자열 "0"도 true

```
Boolean(100); //true
Boolean(“1”); //true
Boolean(true); //true
Boolean(Object); //true
Boolean([]); //true
Boolean(0); //false
Boolean(NaN); //false
Boolean(null); //false
Boolean(undefined); //false
Boolean( ); //false

const numb1 = 0;
Boolean(numb1); // false
!!numb1; // false
!numb1; // true
```

### \==, === 차이점

---

-   \== : equal Operator
    -   데이터 타입이 다르고 값만 같아도 true를, 값이 다르면 false라고 한다.
-   \=== : strict equal operator
    -   데이터 타입과 값이 모두 같아야 true를,  하나라도  다르면 false라고 한다.

### **느슨한 타입의 동적언어의 문제점과 보완할 수 있는 방법**

---

#### 느슨한 타입의 동적언어의 문제점

-   실행도중에 변수에 예상치 못한 타입이 들어와 타입에러가 발생할 수 있습니다.
-   동적타입 언어는 런타임 시 확인할 수 밖에 없기 때문에, 코드가 길고 복잡해질 경우 타입 에러를 찾기가 어려워 집니다.

#### 보완방법

-   JavaScript의 단점을 보완하여 정적 타입 체크와 강력한 문법을 추가한 TypeScript를 사용하여 보완 가능

#### 타입 스크립트란?

-   언어는 크게 정적 타입과 동적 타입 언어로 구분할 수 있습니다. 타입 스크립트는 자바스크립트에 타입을 부여한 정적 타입 언어입니다. 만약 타입 스크립트를 브라우저에서 실행하려면 파일을 변환하는 트랜스 파일 과정을 거쳐서 사용합니다. 공식적으로는 트랜스 파일이 아닌 컴파일된다고 표현합니다. 컴파일의 경우 한 언어로 작성된 소스 코드를 다른 언어로 변환하는 것을 뜻하는 반면, 트랜스 파일의 경우 한 언어로 작성된 소스 코드를 비슷한 수준의 다른 언어로 변환한다는 차이가 있습니다. 예를 들어 Java를 컴파일하면 bytecode 코드가 출력되지만, C++를 트랜스 파일 하면 C가 출력되며 Typescript를 트랜스 파일 하면 Javascript가 출력됩니다. 하지만 공식적으로 컴파일된다고 표현하기 때문에 컴파일이란 용어를 사용하겠습니다.
-   이런 정적 타입 언어는 런타임 이전에 타입이 올바른지에 대한 검사를 시행하며, 동적 타입 언어는 런타임에 프로그램의 타입이 올바른지에 대한 검사를 실행합니다. 만약 래퍼런스 오류를 유발하는 코드가 존재한다면 정적 언어는 컴파일하는 과정에서 오류를 출력하는 반면 동적 언어는 해당 구문이 실행되는 시점에서 오류를 출력합니다.

### undefined와 null의 미세한 차이들을 비교해보세요.

---

Null : 변수를 선언하고 빈 값을 할당한 상태(빈 객체)

-   null은 원시값(Primitive Type) 중 하나로, 어떤 값이 의도적으로 비어있음을 표현한다. 
-   undefined는 값이 지정되지 않은 경우를 의미하지만, null의 경우에는 해당 변수가 어떤 객체도 가리키고 있지 않다는 것을 의미한다.

undefined  : 변수를 선언하고 값을 할당하지 않은 상태

-   undefined는 원시값(Primitive Type)으로, 선언한 후에 값을 할당하지 않은 변수나 값이 주어지지 않은 인수에 자동으로 할당된다. 이 값은 전역 객체의 속성 중 하나로, 전역 스코프에서의 변수이기도 하다. 따라서 undefined 변수의 초기 값은 undefined 원시 값이다.
-   아래의 경우에 변수가 undefined를 반환한다.
    -   값을 할당하지 않은 변수
    -   메서드와 선언에서 변수가 할당받지 않은 경우
    -   함수가 값을 return 하지 않았을 때

## 2)JavaScript 객체와 불변성이란 ? 

### **기본형 데이터와 참조형 데이터**

---

#### 기본형 타입 :

-   기본형 타입은 선언되는 순간 값이 메모리에 저장되고, **변수가 그 값을 가리키게** 된다.
-   따라서 같은 값을 가리키는 두 변수를 동등 비교연산자(===)로 비교했을 때 true값이 반환된다.
    -   같은 값을 가리킨다는 것을 의미한다.
-   객체가 아니면서 method를 가지지 않는 6가지의 타입이 있다.
-   원시 자료형은 모두 “하나”의 정보, 즉, 데이터를 담고 있다.
-   string, number, bigint, boolean, undefined, symbol, (null은 원시 타입과 거의 같게 사용되지만 엄밀히 따지면 객체이다. 빈 참조를 나타내는 데 자주 사용된다.)

#### 참조형 타입 :

-   자바스크립트에선 원시 자료형이 아닌 모든 것은 참조 자료형이다.
-   참조형은 원시형 데이터의 집합이다.
-   배열(\[\])과 객체({}), 함수(function(){})가 대표적이다.
-   참조 자료형은 기존에 고정된 크기의 보관함이 아니다.
-   참조 자료형을 변수에 할당할 때는 변수에 값이 아닌 주소를 저장한다.
-   동적으로 크기가 변하는 데이터를 보관하기위해 변수가 아닌 다른곳에 데이터를 저장하고 변수에는 그 주소만 할당한다.
-   배열 – Array : \[0,1,2,3,4\]
-   객체 – Object {name : “Hanamon”, age : 16}

요약

-   원시형 타입은 값이 그 값 자체이므로, 값을 바꿀 수 없다. ⇒ 불변하다.
-   객체는 같은 객체라도 속성 값을 바꿀 수 있기 때문에 ⇒ 불변하지 않다.(가변성을 가진다)

#### 불변 객체란?

-    참조하고 있는 데이터를 변경할 수 없는 객체
-   불변 객체를 사용하였을 때 장점은 외부에서 임의로 내부의 값을 제어할 수 없기 때문에
-   객체의 자율성이 보장되고
-   프로그램 내에서 변하지 않는 즉 고정된 부분이 많아짐으로써 프로그램 안정도를 높일 수 있습니다.

### **불변 객체를 만드는 방법**

---

#### const

-   상수 선언 키워드로 사용되기 때문에 값을 재 할당하는 것이 불가능하고, 선언과 할당이 동시에 이루어져야 한다. 
-   할당된 값이 상수가 되는 것이 아니고, 바인딩된 값이 상수가 되는 것이다.
-    const로 선언된 객체의 속성 변경 가능하다.

Object.freeze(불변하게 만드려는 객체)

-   객체를 동결하기 위한 메소드
-   Object.freeze()는 동결된 객체를 반환하지만 객체의 재할당은 가능하다. 
-   때문에 Object.freeze()도 불변 객체라고 할 수는 없을 것 같다.

```
var obj1 = { name: 'Serzhul' }
Object.freeze(obj1)
obj1.name = 'Daewon'
console.log(obj1)
// {name: 'Serzhul'} => 속성 값이 변하지 않음
```

#### const와 freeze의 차이점

```
const obj1 = { name: 'Serzhul' }
Object.freeze(obj1)
const obj2 = { name: 'Serzhul' }
obj1 = obj2 // const로 인해 typeError 발생
obj1.name = 'Daewon' // freeze로 인해 오류 발생
```

-   위 예시코드에서 볼 수 있듯이 한마디로 정리하면 const는 선언된 변수명이 다른 값을 가리키지 못하도록 막는 역할을 한다고 할 수 있고, freeze는 객체내 속성 값을 바꾸지 못하게 하는 역할을 한다고 보면 된다.

#### const와 Object.freeze()를 조합

```
const test = {
    'name' : 'jung'
};

Object.freeze(test);
```

-   const의 재할당불가 + Object.freeze()의 객체속성 변경불가
-   먼저 const키워드로 바인딩된 변수를 상수화 시킨 다음, Object.freeze()로 해당 변수를 동결 객체를 만들면 객체의 재할당과 객체의 속성 둘 다 변경 불가능한 불변 객체가 된다.

### **얕은 복사와 깊은 복사**

---

#### 얕은 복사

-    참조(주소)값의 복사를 나타낸다.
-   obj 객체를 새로운 newObj 객체에 할당하였으며 이를 참조 할당이라 부른다. 복사 후 newObj 객체의 value값을 변경하였더니 기존의 obj.value값도 같이 변경된 것을 알 수 있다. 두 객체를 비교해도 true로 나온다. 이렇게 자바스크립트의 참조 타입은 **얕은 복사**가 된다고 볼 수 있으며, 이는 **데이터가 그대로 생성되는 것이 아닌 해당 데이터의 참조 값(메모리 주소)를 전달하여 결국 한 데이터를 공유하는 것**이다.

```
const obj = { vaule: 1 }
const newObj = obj;

newObj.vaule = 2;

console.log(obj.vaule); // 2
console.log(obj === newObj); // true
```

#### 깊은 복사

-   값 자체의 복사를 나타낸다.
-   변수 a를 새로운 b에 할당하였고 b 값을 변경하여도 기존의 a의 값은 변경되지 않는다. 두 값을 비교하면 false가 출력되며 서로의 값은 단독으로 존재하다는 것을 알 수 있다. 이렇게 자바스크립트의 원시 타입은 **깊은 복사**가 되며, 이는 **독립적인 메모리에 값 자체를 할당하여 생성하는 것**이라 볼 수 있다.

```
let a = 1;
let b = a;

b = 2;

console.log(a); // 1
console.log(b); // 2
console.log(a === b); // false
```

## 3)호이스팅과 TDZ는 무엇일까 ?

1.  스코프, 호이스팅, TDZ
2.  함수 선언문과 함수 표현식에서 호이스팅 방식의 차이
3.  여러분이 많이 작성해온 let, const, var, function 이 어떤 원리로 실행되는지 알 수 있어요.
4.  실행 컨텍스트와 콜 스택
5.  스코프 체인, 변수 은닉화



## reference
- https://okayoon.tistory.com/entry/%EC%BD%94%EC%96%B4-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EA%B8%B0%EB%B3%B8%ED%98%95-%ED%83%80%EC%9E%85Primitive-Type%EA%B3%BC-%EC%B0%B8%EC%A1%B0%ED%98%95-%ED%83%80%EC%9E%85Reference-Type
- 